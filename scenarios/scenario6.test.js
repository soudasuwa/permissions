const assert = require("node:assert");
const { test } = require("node:test");
const { AccessController } = require("../AccessController");

/* Scenario 6: Invoice Lifecycle Rules
   Roles: admin, customer
   Resources: invoices
   This scenario models invoices generated by an uptime module. While the module
   is generating an invoice, it is hidden from the customer and read only for the
   administration. Once generation is done, administration may edit the invoice
   while in draft or pending status. Customers may pay their own pending invoices
   once available. Completed invoices are read only for everyone.
*/

const rules = [
	{
		when: { resource: "invoice" },
		rules: [
			{
				// Administration may view invoices at any time
				when: { action: "view" },
				rule: { "user.role": "admin" },
			},
			{
				// Customers may view their invoice only after generation is done
				when: { action: "view" },
				rule: {
					"user.role": "customer",
					invoice: {
						ownerId: { reference: "user.id" },
						moduleStatus: { not: "generating" },
					},
				},
			},
			{
				// Admins may edit while generation finished and invoice not complete
				when: { action: "edit" },
				rule: {
					"user.role": "admin",
					invoice: {
						moduleStatus: { not: "generating" },
						adminStatus: { in: ["draft", "pending"] },
					},
				},
			},
			{
				// Customers may pay their own pending invoice when available
				when: { action: "pay" },
				rule: {
					"user.role": "customer",
					invoice: {
						ownerId: { reference: "user.id" },
						moduleStatus: { not: "generating" },
						adminStatus: "pending",
						customerStatus: "pending",
					},
				},
			},
		],
	},
];

module.exports = { rules };

const base = new AccessController(rules).context({ resource: "invoice" });

// Tests

test("scenario6: admin can edit draft invoice", () => {
	const controller = base.context({
		action: "edit",
		user: { role: "admin" },
		invoice: { moduleStatus: "done", adminStatus: "draft" },
	});
	assert.strictEqual(controller.check(), true);
});

test("scenario6: admin cannot edit when module generating", () => {
	const controller = base.context({
		action: "edit",
		user: { role: "admin" },
		invoice: { moduleStatus: "generating", adminStatus: "draft" },
	});
	assert.strictEqual(controller.check(), false);
});

test("scenario6: admin cannot edit completed invoice", () => {
	const controller = base.context({
		action: "edit",
		user: { role: "admin" },
		invoice: { moduleStatus: "done", adminStatus: "complete" },
	});
	assert.strictEqual(controller.check(), false);
});

test("scenario6: customer can pay own pending invoice", () => {
	const controller = base.context({
		action: "pay",
		user: { role: "customer", id: "c1" },
		invoice: {
			ownerId: "c1",
			moduleStatus: "done",
			adminStatus: "pending",
			customerStatus: "pending",
		},
	});
	assert.strictEqual(controller.check(), true);
});

test("scenario6: customer cannot pay completed invoice", () => {
	const controller = base.context({
		action: "pay",
		user: { role: "customer", id: "c1" },
		invoice: {
			ownerId: "c1",
			moduleStatus: "done",
			adminStatus: "complete",
			customerStatus: "complete",
		},
	});
	assert.strictEqual(controller.check(), false);
});

test("scenario6: customer cannot pay someone else invoice", () => {
	const controller = base.context({
		action: "pay",
		user: { role: "customer", id: "c1" },
		invoice: {
			ownerId: "c2",
			moduleStatus: "done",
			adminStatus: "pending",
			customerStatus: "pending",
		},
	});
	assert.strictEqual(controller.check(), false);
});

test("scenario6: customer cannot view invoice while generating", () => {
	const controller = base.context({
		action: "view",
		user: { role: "customer", id: "c1" },
		invoice: { ownerId: "c1", moduleStatus: "generating" },
	});
	assert.strictEqual(controller.check(), false);
});

test("scenario6: customer can view invoice when done", () => {
	const controller = base.context({
		action: "view",
		user: { role: "customer", id: "c1" },
		invoice: {
			ownerId: "c1",
			moduleStatus: "done",
			adminStatus: "pending",
			customerStatus: "pending",
		},
	});
	assert.strictEqual(controller.check(), true);
});
